# TODO
# Add affected e2e apps for matrix output

name: 'NX affected'
description: 'Get Nx affected info'
inputs:
  affected-per-agent:
    description: How many affected apps or libraries per agent
    required: false
    default: '2'
  min-required-agents:
    description: The minimum number of agents required to trigger a matrix.
    required: false
    default: '1'
  max-agents:
    description: The maximum number of agents to spawn
    required: false
    default: '4'

outputs:
  affected:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected }}
  affectedLength:
    description: 'Number of affected apps & libraries'
    value: ${{ steps.affected.outputs.affectedLength }}
  affectedApps:
    description: 'Affected apps'
    value: ${{ steps.affected.outputs.affectedApps }}
  affectedE2E:
    description: 'Affected E2E apps'
    value: ${{ steps.affected.outputs.affectedE2E }}
  affectedNonE2E:
    description: 'Affected apps excluding E2E apps'
    value: ${{ steps.affected.outputs.affectedNonE2E }}
  affectedAppsLength:
    description: 'Number of affected apps'
    value: ${{ steps.affected.outputs.affectedAppsLength }}
  affectedLibs:
    description: 'Affected libraries'
    value: ${{ steps.affected.outputs.affectedLibs }}
  affectedLibsLength:
    description: 'Number of affected libraries'
    value: ${{ steps.affected.outputs.affectedLibsLength }}
  hasAffected:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasAffected }}
  agents:
    description: 'The matrix of agents to spawn'
    value: ${{ steps.affected.outputs.agents }}
  agentsLength:
    description: 'Number of agents to spawn'
    value: ${{ steps.affected.outputs.agentsLength }}
  hasAgents:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasAgents }}
  allE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allE2E }}
  allNonE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allNonE2E }}
  allLibs:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allLibs }}
  hasE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasE2E }}
  hasNonE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasNonE2E }}
  hasLibs:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasLibs }}

runs:
  using: 'composite'
  steps:
    - name: Process parallel commands configuration
      uses: actions/github-script@v6
      id: affected
      with:
        script: |
          const { promisify } = require('util');
          const { exec: nodeExec } = require('child_process');

          const execAsync = promisify(nodeExec);

          const getAffected = async () => {
            const [
              { stdout: rawApps },
              { stdout: rawLibs },
              { stdout: rawAllApps },
              { stdout: rawAllLibs }
            ] = await Promise.all([
              execAsync(`npx nx affected:apps --plain`),
              execAsync(`npx nx affected:libs --plain`),
              execAsync(`npx nx affected:apps --plain --all`),
              execAsync(`npx nx affected:libs --plain --all`),
            ]);

            const affectedApps = rawApps.replace('\n', '').split(' ');
            const affectedLibs = rawLibs.replace('\n', '').split(' ');
            const allApps = rawAllApps.replace('\n', '').split(' ');
            const allLibs = rawAllLibs.replace('\n', '').split(' ');

            const affected = [
              ...rawApps.replace('\n', '').split(' '),
              ...rawLibs.replace('\n', '').split(' '),
            ];


            return {
              affected,
              affectedApps,
              affectedLibs,
              allApps,
              allLibs
            };
          };

          const {
              affected,
              affectedApps,
              affectedLibs,
              allApps,
              allLibs,
          } = await getAffected();

          const encodedAffected = JSON.stringify(affected).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAffectedApps = JSON.stringify(affectedApps).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAffectedLibs = JSON.stringify(affectedLibs).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAllE2E = JSON.stringify(allApps.filter(app => app.endsWith('-e2e'))).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAllNonE2E = JSON.stringify(allApps.filter(app => !app.endsWith('-e2e'))).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAllLibs = JSON.stringify(allLibs).replace(
            /%27/g,
            "'\\''"
          );

          const affectedE2E = JSON.stringify(affectedApps.filter(app => app.endsWith('-e2e'))).replace(
            /%27/g,
            "'\\''"
          );

          const affectedNonE2E = JSON.stringify(affectedApps.filter(app => !app.endsWith('-e2e'))).replace(
            /%27/g,
            "'\\''"
          );

          const affectedPerAgentInput = core.getInput('affected-per-agent', { required: false });

          const affectedPerAgent = parseInt(affectedPerAgentInput === '' ? '2' : affectedPerAgentInput);

          const minAgentsInput = core.getInput('min-required-agents', { required: false });

          const minAgents = parseInt(minAgentsInput === '' ? '1' : minAgentsInput);

          const maxAgentsInput = core.getInput('max-agents', { required: false });
          const maxAgents = parseInt(maxAgentsInput === '' ? '4' : maxAgentsInput);

          // Agents in addition to the main job
          const allAgents = (affected.length / affectedPerAgent) - 1;
          let agentsLength = allAgents > maxAgents ? maxAgents : allAgents;

          if (agentsLength < minAgentsInput) {
            agentsLength = 0;
          }

          const agents = [...Array(agentsLength + 1).keys()];

          agents.shift();

          const hasAgents = agentsLength > 0;
          const hasAffected = encodedAffected.length > 0;
          const hasE2E = encodedAllE2E !== '[]';
          const hasNonE2E = encodedAllNonE2E !== '[]';
          const hasLibs = encodedAllLibs !== '[]';

          console.log({
            affected: encodedAffected,
            'affectedLength': affected.length,
            'affectedApps': encodedAffectedApps,
            'affectedAppsLength': affectedApps.length,
            'affectedLibs': encodedAffectedLibs,
            'affectedLibsLength': affectedLibs.length,
            'agents': agents,
            'agentsLength': agentsLength,
            'hasAgents': hasAgents,
            'hasAffected': hasAffected,
            'affectedE2E': affectedE2E,
            'affectedNonE2E': affectedNonE2E,
            'allE2E': encodedAllE2E,
            'allNonE2E': encodedAllNonE2E,
            'allLibs': encodedAllLibs,
            'hasE2E': hasE2E,
            'hasNonE2E': hasNonE2E,
            'hasLibs': hasLibs
          });

          core.setOutput('affected', encodedAffected);
          core.setOutput('affectedLength', affected.length);
          core.setOutput('affectedApps', encodedAffectedApps);
          core.setOutput('affectedAppsLength', affectedApps.length);
          core.setOutput('affectedLibs', encodedAffectedLibs);
          core.setOutput('affectedLibsLength', affectedLibs.length);
          core.setOutput('agents', agents);
          core.setOutput('agentsLength', agentsLength);
          core.setOutput('hasAgents', hasAgents);
          core.setOutput('hasAffected', hasAffected);
          core.setOutput('affectedE2E', affectedE2E);
          core.setOutput('affectedNonE2E', affectedNonE2E);
          core.setOutput('allE2E', encodedAllE2E);
          core.setOutput('allNonE2E', encodedAllNonE2E);
          core.setOutput('allLibs', encodedAllLibs);
          core.setOutput('hasE2E', hasE2E);
          core.setOutput('hasNonE2E', hasNonE2E);
          core.setOutput('hasLibs', hasLibs);
