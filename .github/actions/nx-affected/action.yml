# TODO
# Add affected e2e apps for matrix output

name: 'NX affected'
description: 'Get Nx affected info'
inputs:
  affected-per-agent:
    description: How many affected apps or libraries per agent
    required: false
    default: '2'
  min-required-agents:
    description: The minimum number of agents required to trigger a matrix.
    required: false
    default: '1'
  max-agents:
    description: The maximum number of agents to spawn
    required: false
    default: '4'

outputs:
  affected:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected }}
  affectedLength:
    description: 'Number of affected apps & libraries'
    value: ${{ steps.affected.outputs.affectedLength }}
  affectedApps:
    description: 'Affected apps'
    value: ${{ steps.affected.outputs.affectedApps }}
  affectedE2E:
    description: 'Affected E2E apps'
    value: ${{ steps.affected.outputs.affectedE2E }}
  affectedNonE2E:
    description: 'Affected apps excluding E2E apps'
    value: ${{ steps.affected.outputs.affectedNonE2E }}
  affectedAppsLength:
    description: 'Number of affected apps'
    value: ${{ steps.affected.outputs.affectedAppsLength }}
  affectedLibs:
    description: 'Affected libraries'
    value: ${{ steps.affected.outputs.affectedLibs }}
  affectedLibsLength:
    description: 'Number of affected libraries'
    value: ${{ steps.affected.outputs.affectedLibsLength }}
  hasAffected:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasAffected }}
  agents:
    description: 'The matrix of agents to spawn'
    value: ${{ steps.affected.outputs.agents }}
  agentsLength:
    description: 'Number of agents to spawn'
    value: ${{ steps.affected.outputs.agentsLength }}
  hasAgents:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasAgents }}
  allE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allE2E }}
  allNonE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allNonE2E }}
  allLibs:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.allLibs }}
  hasE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasE2E }}
  hasNonE2E:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasNonE2E }}
  hasLibs:
    description: Has agents to create.
    value: ${{ steps.affected.outputs.hasLibs }}

runs:
  using: 'composite'
  steps:
    - name: Process parallel commands configuration
      uses: actions/github-script@v6
      id: affected
      with:
        script: |
          const { promisify } = require("util");
          const { exec: nodeExec } = require("child_process");

          const execAsync = promisify(nodeExec);

          const getAffected = async () => {
            const [
              { stdout: rawApps },
              { stdout: rawLibs },
              { stdout: rawAllAPIGatewayApps },
              { stdout: rawAllNextjsApps },
              { stdout: rawAllLibs },
            ] = await Promise.all([
              execAsync(`npx nx affected:apps --plain`),
              execAsync(`npx nx affected:libs --plain`),
              execAsync(`ls -m apps/api-gateway`),
              execAsync(`ls -m apps/nextjs`),
              execAsync(`ls -m libs/sdk`),
            ]);

            console.log({
              rawApps,
              rawLibs,
              rawAllAPIGatewayApps,
              rawAllNextjsApps,
              rawAllLibs,
            });

            const affectedApps = rawApps.replace("\n", "").split(" ");
            const affectedLibs = rawLibs.replace("\n", "").split(" ");
            const allApps = [
              ...rawAllAPIGatewayApps
                .replace(",", "")
                .replace("\n", "")
                .split(" ")
                .filter((app) => app !== '""' && app !== ''),
              ...rawAllNextjsApps
                .replace(",", "")
                .replace("\n", "")
                .split(" ")
                .filter((app) => app !== '""' && app !== ''),
            ];
            const allLibs = [
              ...rawAllLibs.replace(",", "").split(" "),
              "nx-plugin-graphql-mesh",
            ];
            const allE2E = allApps.filter((app) => app.endsWith("-e2e"));
            const allNonE2e = allApps.filter((app) => !app.endsWith("-e2e"));

            const affected = [
              ...rawApps.replace("\n", "").split(" "),
              ...rawLibs.replace("\n", "").split(" "),
            ];

            const affectedE2E = affected.filter((app) => app.endsWith("-e2e"));
            const affectedNonE2E = affected.filter((app) => !app.endsWith("-e2e"));

            const hasAffected = affected.length > 0;
            const hasE2E = allE2E.length > 0;
            const hasNonE2E = allNonE2e.length > 0;
            const hasLibs = allLibs.length > 0;

            const encoded = {
              affected: JSON.stringify(affected).replace(/%27/g, "'\\''"),
              affectedApps: JSON.stringify(affectedApps).replace(/%27/g, "'\\''"),
              affectedE2E: JSON.stringify(affectedE2E).replace(/%27/g, "'\\''"),
              affectedLibs: JSON.stringify(affectedLibs).replace(/%27/g, "'\\''"),
              affectedNonE2E: JSON.stringify(affectedNonE2E).replace(/%27/g, "'\\''"),
              allApps: JSON.stringify(allApps).replace(/%27/g, "'\\''"),
              allE2E: JSON.stringify(allE2E).replace(/%27/g, "'\\''"),
              allLibs: JSON.stringify(allLibs).replace(/%27/g, "'\\''"),
              allNonE2e: JSON.stringify(allNonE2e).replace(/%27/g, "'\\''"),
            };

            return {
              affected,
              affectedApps,
              affectedE2E,
              affectedLibs,
              affectedNonE2E,
              allApps,
              allE2E,
              allLibs,
              allNonE2e,
              encoded,
              hasAffected,
              hasE2E,
              hasNonE2E,
              hasLibs,
            };
          };

          const nx = await getAffected();

          const affectedPerAgentInput = core.getInput("affected-per-agent", {
            required: false,
          });

          const affectedPerAgent = parseInt(
            affectedPerAgentInput === "" ? "2" : affectedPerAgentInput
          );

          const minAgentsInput = core.getInput("min-required-agents", {
            required: false,
          });

          const minAgents = parseInt(minAgentsInput === "" ? "1" : minAgentsInput);

          const maxAgentsInput = core.getInput("max-agents", { required: false });
          const maxAgents = parseInt(maxAgentsInput === "" ? "4" : maxAgentsInput);

          // Agents in addition to the main job
          const allAgents = nx.affected.length / affectedPerAgent - 1;
          let agentsLength = allAgents > maxAgents ? maxAgents : allAgents;

          if (agentsLength < minAgents) {
            agentsLength = 0;
          }

          const agents = [...Array(agentsLength + 1).keys()];

          agents.shift();

          const hasAgents = agentsLength > 0;

          console.log({
            ...nx,
            hasAgents,
          });

          core.setOutput("affected", nx.encoded.affected);
          core.setOutput("affectedApps", nx.encoded.affectedApps);
          core.setOutput("affectedAppsLength", nx.affectedApps.length);
          core.setOutput("affectedE2E", nx.affectedE2E);
          core.setOutput("affectedLength", nx.affected.length);
          core.setOutput("affectedLibs", nx.encoded.affectedLibs);
          core.setOutput("affectedLibsLength", nx.affectedLibs.length);
          core.setOutput("affectedNonE2E", nx.affectedNonE2E);
          core.setOutput("agents", agents);
          core.setOutput("agentsLength", agentsLength);
          core.setOutput("allE2E", nx.encoded.allE2E);
          core.setOutput("allLibs", nx.encoded.allLibs);
          core.setOutput("allNonE2E", nx.encoded.allNonE2E);
          core.setOutput("hasAffected", nx.hasAffected);
          core.setOutput("hasAgents", hasAgents);
          core.setOutput("hasE2E", nx.hasE2E);
          core.setOutput("hasLibs", nx.hasLibs);
          core.setOutput("hasNonE2E", nx.hasNonE2E);
