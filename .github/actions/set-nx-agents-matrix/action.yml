name: 'Set NX agents matrix'
description: 'Automatically scale the number of Nx agents'
inputs:
  affected-per-agent:
    description: How many affected apps or libraries per agent
    required: false
    default: '2'
  max-agents:
    description: The maximum number of agents to spawn
    required: false
    default: '4'

outputs:
  affected:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected }}
  affected-length:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected-length }}
  affected-apps:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected-apps }}
  affected-apps-length:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected-apps-length }}
  affected-libs:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected-libs }}
  affected-libs-length:
    description: 'Affected apps & libraries'
    value: ${{ steps.affected.outputs.affected-libs-length }}
  agents:
    description: 'The matrix of agents to spawn'
    value: ${{ steps.affected.outputs.agents }}
  agents-length:
    description: 'The number of agents to spawn'
    value: ${{ steps.affected.outputs.agents-length }}

runs:
  using: 'composite'
  steps:
    - name: Process parallel commands configuration
      uses: actions/github-script@v6
      id: affected
      with:
        script: |
          const { promisify } = require('util');
          const { exec: nodeExec } = require('child_process');

          const execAsync = promisify(nodeExec);

          const getAffected = async () => {
            const [{ stdout: apps }, { stdout: libs }] = await Promise.all([
              execAsync(`npx nx affected:apps --plain`),
              execAsync(`npx nx affected:libs --plain`),
            ]);

            const affectedApps = apps.replace('\n', '').split(' ');
            const affectedLibs = libs.replace('\n', '').split(' ');

            const affected = [
              ...apps.replace('\n', '').split(' '),
              ...libs.replace('\n', '').split(' '),
            ];

            return {
              affected,
              affectedApps,
              affectedLibs
            };
          };

          const {
              affected,
              affectedApps,
              affectedLibs
          } = await getAffected();

          const encodedAffected = JSON.stringify(affected).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAffectedApps = JSON.stringify(affectedApps).replace(
            /%27/g,
            "'\\''"
          );

          const encodedAffectedLibs = JSON.stringify(affectedLibs).replace(
            /%27/g,
            "'\\''"
          );

          const affectedPerAgentInput = core.getInput('affected-per-agent', { required: false });
          const affectedPerAgent = parseInt(affectedPerAgentInput === '' ? '2' : affectedPerAgentInput);

          const maxAgentsInput = core.getInput('max-agents', { required: false });
          const maxAgents = parseInt(maxAgentsInput === '' ? '4' : maxAgentsInput);

          console.log('affectedPerAgent', {
            affectedPerAgent,
            type: typeof affectedPerAgent,
          });
          console.log('maxAgents', maxAgents)

          const allAgents = affected.length * affectedPerAgent;
          const agentsLength = allAgents > maxAgents ? maxAgents : allAgents;

          const agents = [...Array(agentsLength + 1).keys()];

          agents.shift();

          console.log({
            affected: encodedAffected,
            'affectedLength': affected.length,
            'affectedApps': encodedAffectedApps,
            'affectedAppsLength': affectedApps.length,
            'affectedLibs': encodedAffectedLibs,
            'affectedLibsLength': affectedLibs.length,
            'agents': agents,
            'agentsLength': agentsLength,
          });

          core.exportVariable('affected', encodedAffected);
          core.exportVariable('affectedLength', affected.length);
          core.exportVariable('affectedApps', encodedAffectedApps);
          core.exportVariable('affectedAppsLength', affectedApps.length);
          core.exportVariable('affectedLibs', encodedAffectedLibs);
          core.exportVariable('affectedLibsLength', affectedLibs.length);
          core.exportVariable('agents', agents);
          core.exportVariable('agentsLength', agentsLength);
