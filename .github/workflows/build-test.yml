name: 'Build & Test'

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

  workflow_call:
    inputs:
      affected:
        description: Only build & test affected apps & libraries.
        type: boolean
        required: false
        default: true
      parallel:
        description: Max number of parallel processes per Nx target
        type: number
        required: false
        default: 3

concurrency:
  group: build-test-${{ github.workflow }}-${{ github.ref }}

env:
  NX_AFFECTED: ${{ inputs.affected == 'true' || true }}
  NX_PARALLEL: ${{ inputs.parallel || 3 }}
  NX_AFFECTED_COMMANDS: |
    pnpm nx-cloud record -- npx nx workspace-lint
    pnpm nx-cloud record -- npx nx format:check
    pnpm nx affected --target=lint --parallel=${{ inputs.parallel || 3 }}
    pnpm nx affected --target=test --parallel=${{ inputs.parallel || 3 }} --ci --code-coverage
    pnpm nx affected --target=build --parallel=${{ inputs.parallel || 3 }}
  NX_COMMANDS: |
    pnpm nx-cloud record -- npx nx workspace-lint
    pnpm nx-cloud record -- npx nx format:check
    pnpm nx run-many --target=lint --all --parallel=${{ inputs.parallel || 3 }}
    pnpm nx run-many --target=test --all --parallel=${{ inputs.parallel || 3 }} --ci --code-coverage
    pnpm nx run-many --target=build --all --parallel=${{ inputs.parallel || 3 }}

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      # Enable tmate debugging of manually-triggered workflows
      # if the input option was provided.
      - name: Setup SSH debug session
        uses: mxschmitt/action-tmate@8b4e4ac71822ed7e0ad5fb3d1c33483e9e8fb270 # tag=v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

      - name: Check out repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
        with:
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      # https://github.com/nrwl/ci/blob/main/.github/workflows/nx-cloud-main.yml#L165
      - name: Create command utils
        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # tag=v6
        with:
          script: |
            const { writeFileSync } = require('fs');
            const runCommandsInParallelScript = `
              # Extract the provided commands from the stringified JSON array.
              IFS=$'\n' read -d '' -a userCommands < <((jq -c -r '.[]') <<<"$1")
              # Invoke the provided commands in parallel and collect their exit codes.
              pids=()
              for userCommand in "\${userCommands[@]}"; do
                eval "$userCommand" & pids+=($!)
              done
              # If any one of the invoked commands exited with a non-zero exit code, exit the whole thing with code 1.
              for pid in \${pids[*]}; do
                if ! wait $pid; then
                  exit 1
                fi
              done
              # All the invoked commands must have exited with code zero.
              exit 0
            `;
            writeFileSync('./.github/workflows/run-commands-in-parallel.sh', runCommandsInParallelScript);

      - name: Prepare command utils
        run: chmod +x ${{ github.workspace }}/.github/workflows/run-commands-in-parallel.sh

      # https://github.com/nrwl/ci/blob/main/.github/workflows/nx-cloud-main.yml#L206
      - name: Process Nx parallel commands
        if: ${{ env.NX_AFFECTED == 'true' }}
        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # tag=v6
        id: parallel_commands_config
        env:
          NX_AFFECTED: ${{ env.NX_AFFECTED }}
        with:
          script: |
            const parallelCommandsOnMainStr = (process.env.NX_AFFECTED == 'true' ? process.env.NX_AFFECTED_COMMANDS : process.env.NX_COMMANDS) ?? '';
            const parallelCommandsOnMain = parallelCommandsOnMainStr
              .split('\n')
              .map(command => command.trim())
              .filter(command => command.length > 0)
              .map(s => s.replace(/'/g, '%27'));
            const formattedArrayOfCommands = [
              ...parallelCommandsOnMain.map(s => s
                .split(' && ')
                .map(s => `NX_CLOUD_DISTRIBUTED_EXECUTION=false ${s}`)
                .join(' && ')
              ),
            ];
            const stringifiedEncodedArrayOfCommands = JSON.stringify(formattedArrayOfCommands)
              .replace(/%27/g, "'\\''");
            return stringifiedEncodedArrayOfCommands
          result-encoding: string

      # https://github.com/nrwl/ci/blob/main/.github/workflows/nx-cloud-main.yml#L246
      - name: Nx Targets
        run: ${{ github.workspace }}/.github/workflows/run-commands-in-parallel.sh '${{ steps.parallel_commands_config.outputs.result }}'
        shell: bash

      - name: Affected E2E
        if: ${{ env.NX_AFFECTED == 'true' }}
        uses: cypress-io/github-action@f9e9419e05e5b83168d397d9c1d8d40ea179901e # tag=v4.0.0
        with:
          install: false
          command: |
            pnpm nx affected --target=e2e --parallel=${{ env.NX_PARALLEL }}
            pnpm nx run nextjs-stackexchange:build:production
            pnpm nx run nx-plugin-graphql-mesh-e2e:e2e:build

      - name: E2E
        if: ${{ env.NX_AFFECTED == 'false' }}
        uses: cypress-io/github-action@f9e9419e05e5b83168d397d9c1d8d40ea179901e # tag=v4.0.0
        with:
          install: false
          command: |
            pnpm nx run-many --target=e2e --all --parallel=${{ env.NX_PARALLEL }}
            pnpm nx run nextjs-stackexchange:build:production
            pnpm nx run nx-plugin-graphql-mesh-e2e:e2e:build
