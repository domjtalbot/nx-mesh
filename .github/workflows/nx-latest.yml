name: 'Nx latest'

on:
  pull_request:

  schedule:
    # Checkout for updates daily at midnight
    - cron: '0 0 * * *'

  workflow_dispatch:

concurrency:
  group: nx-latest--${{ github.workflow }}--${{ github.ref }}

env:
  NX__TRIPPIN__API_KEY: ${{ secrets.NX__TRIPPIN__API_KEY }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  nx-version:
    name: Nx version
    runs-on: ubuntu-latest
    env:
      cache_file: nx-latest.version
      cache_key: nx-latest-version
    outputs:
      current_tag: ${{ steps.nx.outputs.current_tag }}
      isLatestChanged: ${{ steps.nx.outputs.current_tag != steps.nx.outputs.release_tag }}
      latest_tag: ${{ steps.nx.outputs.release_tag }}
      release_notes: ${{ steps.nx.outputs.release_notes }}
    steps:
      - uses: actions/checkout@v3

      - name: Default nx version
        run: |
          echo "none" > ${{ env.cache_file }}

      - name: Restore Nx version cache
        uses: actions/cache/restore@v3
        id: nx-version-cache
        with:
          path: |
            ${{ env.cache_file }}
          key: |
            ${{ env.cache_key }}

      - name: Fetch latest Nx release
        id: nx
        run: |
          # Get latest Nx release details
          releaseInfo=$(curl -sL https://api.github.com/repos/nrwl/nx/releases/latest)
          echo "$releaseInfo"
          echo ""
          echo ""

          # Get the latest tag from GitHub
          nxTag="$(fromJson($releaseInfo) | jq -r ".tag_name")"

          # Get the latest tag notes from GitHub
          nxReleaseNotes="$(fromJson($releaseInfo) | jq -r ".body")"

          # Store the latest version
          echo "release_tag=$nxVersion"
          echo "release_tag=$nxVersion" >> $GITHUB_OUTPUT

          # Store the latest release notes
          echo "release_notes=$nxReleaseNotes"
          echo "release_notes=$nxReleaseNotes" >> $GITHUB_OUTPUT

          # Get the current version stored in nx-latest.version
          current_tag=$(< nx-latest.version)
          echo "current_tag=$current_tag"
          echo "current_tag=$current_tag" >> $GITHUB_OUTPUT

      # If the version of nx has updated, save it to nx-latest.version
      - name: Update nx version
        if: steps.nx.outputs.current_tag != steps.nx.outputs.release_tag
        run: |
          echo ${{ steps.nx.outputs.release_tag }} > ${{ env.cache_file }}

      # Save Cache

      - name: Save Nx version
        uses: actions/cache/save@v3
        if: steps.nx.outputs.current_tag != steps.nx.outputs.release_tag
        with:
          path: |
            ${{ env.cache_file }}
          key: |
            ${{ env.cache_key }}

  build:
    uses: ./.github/workflows/__build.yml
    needs: [nx-version]
    if: needs.nx-version.outputs.isLatestChanged == 'true'
    secrets: inherit
    strategy:
      matrix:
        node_version: [lts]
    with:
      affected: false
      node_version: ${{ matrix.node_version }}
      save_cache: true

  generators:
    needs: [nx-version, build]
    if: needs.nx-version.outputs.isLatestChanged == 'true'
    uses: ./.github/workflows/__generators.yml
    secrets: inherit
    strategy:
      matrix:
        node_version: [lts]
    with:
      affected: false
      node_version: ${{ matrix.node_version }}
      nx_version: '["${{ needs.nx-version.outputs.latest_tag }}"]'

  nx-changed:
    name: Nx version changed
    needs: [nx-version, build, generators]
    if: failure() && needs.nx-version.outputs.isLatestChanged == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: JasonEtco/create-an-issue@v2
        env:
          current_tag: ${{ needs.nx-version.outputs.current_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          latest_tag: ${{ needs.nx-version.outputs.latest_tag }}
          release_notes: ${{ needs.nx-version.outputs.release_notes }}
        with:
          assignees: domjtalbot
          filename: .github/nx-latest-issue-template.md
          search_existing: all
          update_existing: true
