name: 'Setup Job Test'

on:
  workflow_call:
    inputs:
      browsers:
        description: Set up Node with Cypress browsers?
        required: false
        default: 'false'
        type: string
      fetch_depth:
        description: >
          Number of commits to fetch.
          0 indicates all history for all branches and tags.
        default: '1'
        type: string
      node_version:
        description: >
          Optionally define the version of Node to install via Volta.

          Pass `config` (default value) to use the Volta config.
        required: false
        default: 'config'
        type: string
      save_cache:
        description: Should the cache be saved upon completion?
        required: false
        default: 'false'
        type: string
    secrets:
      NX_CLOUD_ACCESS_TOKEN:
        description: 'The NX Cloud API token'
        required: true

concurrency:
  group: setup-job-test--${{ github.workflow }}--${{ github.ref }}

env:
  NX__TRIPPIN__API_KEY: ${{ secrets.NX__TRIPPIN__API_KEY }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Volta

      - name: Setup Volta
        if: inputs.node_version == 'config'
        uses: volta-cli/action@v4

      - name: Setup Volta
        if: inputs.node_version != 'config'
        uses: volta-cli/action@v4
        with:
          node-version: ${{ inputs.node_version }}

      # pnpm

      - uses: pnpm/action-setup@v2
        with:
          run_install: false
          version: latest

      # Utils

      - name: Volta version
        id: volta
        shell: bash
        run: |
          echo "node_version=$(node --version)" >> $GITHUB_OUTPUT
          echo "version=$(volta --version)" >> $GITHUB_OUTPUT

      - name: Node version
        id: node
        shell: bash
        run: |
          echo "version=$(node --version)" >> $GITHUB_OUTPUT

      - name: PNPM version
        id: pnpm
        shell: bash
        run: |
          echo "cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
          echo "version=$(pnpm --version)" >> $GITHUB_OUTPUT

      - name: NX Cloud Envs
        id: nx-cloud
        shell: bash
        run: |
          echo "NX_CLOUD_ENV_NAME=node_${{ steps.node.outputs.version }}__pnpm_${{ steps.pnpm.outputs.version }}" >> $GITHUB_ENV

      - name: Create restore cache key
        id: restore_cache_key
        shell: bash
        run: |
          echo "key=cache-version-2--os-${{ runner.os }}--volta-${{ steps.volta.outputs.version }}--node-${{ steps.node.outputs.version }}--pnpm-${{ steps.pnpm.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Create cache key
        id: cache_key
        shell: bash
        run: |
          echo "key=${{ steps.restore_cache_key.outputs.key }}--lockfile-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Nx Shas
        id: nx_shas
        uses: nrwl/nx-set-shas@v3

      # Restore Node_modules Cache

      - name: Restore PNPM cache
        uses: actions/cache/restore@v3
        id: pnpm-cache
        with:
          path: |
            ${{ steps.pnpm.outputs.cache_dir }}
            **/node_modules
            !**/node_modules/.cache/nx
          key: |
            pnpm--${{ steps.cache_key.outputs.key }}
          restore-keys: |
            pnpm--${{ steps.restore_cache_key.outputs.key }}

      # Toggle Cypress install

      # - name: Disable Cypress install
      #   if: inputs.browsers != 'true' && steps.pnpm-cache.outputs.cache-hit != 'true'
      #   uses: jossef/action-set-json-field@v2
      #   with:
      #     file: package.json
      #     field: pnpm.neverBuiltDependencies
      #     value: '["cypress"]'
      #     parse_json: true

      # Restore global caches

      - name: Restore Cypress Cache
        uses: actions/cache@v3
        id: cypress-cache
        if: inputs.browsers == 'true'
        with:
          path: |
            ~/.cache/Cypress
          key: |
            browsers--${{ steps.cache_key.outputs.key }}
          restore-keys: |
            browsers--${{ steps.restore_cache_key.outputs.key }}

      # - name: Restore PNPM global cache
      #   uses: actions/cache/restore@v3
      #   id: pnpm-global-cache
      #   if: steps.pnpm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: |
      #       ${{ steps.pnpm.outputs.cache_dir }}
      #     key: |
      #       pnpm-global--${{ steps.cache_key.outputs.key }}
      #     restore-keys: |
      #       pnpm-global--${{ steps.restore_cache_key.outputs.key }}

      # Install

      - name: Install Node Dependencies
        if: steps.pnpm-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          pnpm install --frozen-lockfile

      # Clean up

      # - name: Reset changed files
      #   if: inputs.browsers != 'true' && steps.pnpm-cache.outputs.cache-hit != 'true'
      #   shell: bash
      #   run: |
      #     git restore \
      #       package.json \
      #       pnpm-lock.yaml

      # Save Cache

      - name: Save Cypress cache
        uses: actions/cache/save@v3
        if: inputs.save_cache == 'true' && steps.pnpm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.cache/Cypress
          key: |
            browsers--${{ steps.cache_key.outputs.key }}

      # - name: Save PNPM global cache
      #   uses: actions/cache/save@v3
      #   if: inputs.save_cache == 'true' && steps.pnpm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: |
      #       ${{ steps.pnpm.outputs.cache_dir }}
      #     key: |
      #       pnpm-global--${{ steps.cache_key.outputs.key }}

      - name: Save PNPM cache
        uses: actions/cache/save@v3
        if: inputs.save_cache == 'true' && steps.pnpm-cache.outputs.cache-hit != 'true'
        with:
          path: |
            ${{ steps.pnpm.outputs.cache_dir }}
            **/node_modules
            !**/node_modules/.cache/nx
          key: |
            pnpm--${{ steps.cache_key.outputs.key }}
