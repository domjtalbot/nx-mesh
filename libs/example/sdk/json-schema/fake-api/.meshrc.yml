sources:
  - name: FakeAPI
    handler:
      jsonSchema:
        baseUrl: https://not-existing-api.com/API
        operations:
          - field: me
            method: GET
            path: /me
            responseSchema: ./src/json-schemas/user.json#/definitions/User
            type: Query

          - field: company
            method: GET
            path: /company/{args.id}
            responseSchema: ./src/json-schemas/company.json#/definitions/Company
            type: Query
            argTypeMap:
              id:
                type: string
                nullable: false

          - field: createUser
            method: PUT
            path: /user
            requestSample: ./src/json-samples/user-input.json
            requestTypeName: CreateUpdateUser
            responseSchema: ./src/json-schemas/user.json#/definitions/User
            type: Mutation

          - field: updateUser
            method: POST
            path: /user/{args.id}
            requestSample: ./src/json-samples/user-input.json
            requestTypeName: CreateUpdateUser
            responseSchema: ./src/json-schemas/user.json#/definitions/User
            type: Mutation
            argTypeMap:
              id:
                type: string
                nullable: false

          - field: deleteUser
            method: DELETE
            path: /user/{args.id}
            type: Mutation
            argTypeMap:
              id:
                type: string
                nullable: false

additionalTypeDefs: |
  extend type User {
    company: Company
  }
  extend type Company {
    employers: [User]
  }

plugins:
  - mock:
      mocks:
        - apply: User.firstName
          faker: '{{name.firstName}}'

        - apply: User.lastName
          faker: '{{name.lastName}}'

        - apply: User.jobTitle
          faker: '{{name.jobTitle}}'

        - apply: Company.name
          faker: '{{company.companyName}}'

documents:
  - ./src/graphql/**/*.*.graphql

serve:
  playground: false
