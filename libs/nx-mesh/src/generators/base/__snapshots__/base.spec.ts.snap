// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generators/base app directory --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --babelJest should use babel for jest 2`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --babelJest should use babel for jest 3`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --babelJest should use babel for jest 4`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --babelJest should use babel for jest 5`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --e2eTestRunner should use cypress for E2E 1`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app directory --e2eTestRunner should use cypress for E2E 2`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app directory --e2eTestRunner should use cypress for E2E 3`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app directory --e2eTestRunner should use cypress for E2E 4`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app directory --e2eTestRunner should use cypress for E2E 5`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app directory --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a country-info json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a country-info json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a country-info json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a country-info json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a country-info yml config 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a country-info yml config 3`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a country-info yml config 4`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a country-info yml config 5`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a javascript-wiki json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a javascript-wiki json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a javascript-wiki json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a javascript-wiki json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascript-wiki yml config 2`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascript-wiki yml config 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascript-wiki yml config 4`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascript-wiki yml config 5`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascriptWiki config by default 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a javascriptWiki config by default 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascriptWiki config by default 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a javascriptWiki config by default 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a stackexchange json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a stackexchange json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a stackexchange json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a stackexchange json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a stackexchange yml config 2`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a stackexchange yml config 3`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a stackexchange yml config 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a stackexchange yml config 5`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a trippin json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a trippin json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a trippin json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a trippin json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a trippin yml config 2`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a trippin yml config 3`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a trippin yml config 4`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --example should create a trippin yml config 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app directory --linter should use eslint for linting 2`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app directory --linter should use eslint for linting 3`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app directory --linter should use eslint for linting 4`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app directory --linter should use eslint for linting 5`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app directory --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a cjs config when --meshConfig=%s 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --meshConfig should create a cjs config when --meshConfig=%s 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a cjs config when --meshConfig=%s 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a cjs config when --meshConfig=%s 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a js config when --meshConfig=%s 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --meshConfig should create a js config when --meshConfig=%s 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a js config when --meshConfig=%s 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app directory --meshConfig should create a js config when --meshConfig=%s 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app directory --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --meshConfig should create a json config when --meshConfig=%s 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --meshConfig should create a json config when --meshConfig=%s 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --meshConfig should create a json config when --meshConfig=%s 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app directory --meshConfig should create a json config when --meshConfig=%s 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app directory --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config by default 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --meshConfig should create a yml config by default 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config by default 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config by default 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config when --meshConfig=%s 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --meshConfig should create a yml config when --meshConfig=%s 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config when --meshConfig=%s 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app directory --meshConfig should create a yml config when --meshConfig=%s 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 2`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 3`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 4`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 5`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app directory should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base app directory should add mesh dependencies to the workspace package.json 2`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/soap": "0.16.0",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base app directory should add mesh dependencies to the workspace package.json 3`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base app directory should add mesh dependencies to the workspace package.json 4`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base app directory should add mesh dependencies to the workspace package.json 5`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/odata": "0.20.31",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base app with standalone config --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app with standalone config --e2eTestRunner should use cypress for E2E 1`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base app with standalone config --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app with standalone config --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app with standalone config --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app with standalone config --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app with standalone config --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app with standalone config --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app with standalone config --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app with standalone config --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app with standalone config --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base app with standalone config --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app with standalone config --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base app with standalone config --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base app with standalone config --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base app with standalone config --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base app with standalone config --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base app with standalone config --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base app with standalone config --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app with standalone config --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base app with standalone config --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-app',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-mesh-app'
};
"
`;

exports[`generators/base app with standalone config should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib directory --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --babelJest should use babel for jest 2`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --babelJest should use babel for jest 3`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --babelJest should use babel for jest 4`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --babelJest should use babel for jest 5`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a country-info json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a country-info json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a country-info json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a country-info json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a country-info yml config 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a country-info yml config 3`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a country-info yml config 4`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a country-info yml config 5`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki yml config 2`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki yml config 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki yml config 4`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascript-wiki yml config 5`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascriptWiki config by default 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a javascriptWiki config by default 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascriptWiki config by default 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a javascriptWiki config by default 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a stackexchange json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a stackexchange json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a stackexchange json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a stackexchange json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a stackexchange yml config 2`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a stackexchange yml config 3`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a stackexchange yml config 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a stackexchange yml config 5`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin cjs config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin cjs config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin cjs config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin cjs config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin js config 2`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin js config 3`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin js config 4`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin js config 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a trippin json config 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a trippin json config 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a trippin json config 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a trippin json config 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a trippin yml config 2`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a trippin yml config 3`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a trippin yml config 4`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --example should create a trippin yml config 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib directory --linter should use eslint for linting 2`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib directory --linter should use eslint for linting 3`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib directory --linter should use eslint for linting 4`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib directory --linter should use eslint for linting 5`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib directory --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a cjs config when --meshConfig=%s 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --meshConfig should create a cjs config when --meshConfig=%s 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a cjs config when --meshConfig=%s 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a cjs config when --meshConfig=%s 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a js config when --meshConfig=%s 2`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --meshConfig should create a js config when --meshConfig=%s 3`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a js config when --meshConfig=%s 4`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib directory --meshConfig should create a js config when --meshConfig=%s 5`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib directory --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --meshConfig should create a json config when --meshConfig=%s 2`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --meshConfig should create a json config when --meshConfig=%s 3`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --meshConfig should create a json config when --meshConfig=%s 4`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib directory --meshConfig should create a json config when --meshConfig=%s 5`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config by default 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config by default 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config by default 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config by default 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config when --meshConfig=%s 2`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config when --meshConfig=%s 3`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config when --meshConfig=%s 4`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib directory --meshConfig should create a yml config when --meshConfig=%s 5`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 2`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 3`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 4`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 5`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib directory should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib directory should add mesh dependencies to the workspace package.json 2`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/soap": "0.16.0",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib directory should add mesh dependencies to the workspace package.json 3`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib directory should add mesh dependencies to the workspace package.json 4`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib directory should add mesh dependencies to the workspace package.json 5`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/odata": "0.20.31",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base lib with standalone config --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib with standalone config --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib with standalone config --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib with standalone config --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib with standalone config --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib with standalone config --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib with standalone config --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib with standalone config --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib with standalone config --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib with standalone config --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib with standalone config --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib with standalone config --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base lib with standalone config --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base lib with standalone config --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base lib with standalone config --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base lib with standalone config --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base lib with standalone config --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base lib with standalone config --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib with standalone config --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base lib with standalone config --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'my-mesh-lib',
  preset: '../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../coverage/my-mesh-lib'
};
"
`;

exports[`generators/base lib with standalone config should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base nested within app directory --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'test-my-mesh-app',
  preset: '../../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../../coverage/test/my-mesh-app'
};
"
`;

exports[`generators/base nested within app directory --e2eTestRunner should use cypress for E2E 1`] = `
"
describe('my-mesh-app', () => {
  it('should start a mesh server', () => {
    cy.request('/graphql/health').then((resp) => {
      expect(resp.status).to.eq(200);
      expect(resp.body).to.have.property('message', 'alive');
    });
  });

  it('should still be running after 15 seconds', () => {
    cy.wait(1000 * 15)
      .request('/graphql/health')
      .then((resp) => {
        expect(resp.status).to.eq(200);
        expect(resp.body).to.have.property('message', 'alive');
      });
  });
});
"
`;

exports[`generators/base nested within app directory --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within app directory --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within app directory --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base nested within app directory --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base nested within app directory --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base nested within app directory --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base nested within app directory --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base nested within app directory --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base nested within app directory --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

"
`;

exports[`generators/base nested within app directory --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within app directory --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within app directory --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base nested within app directory --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base nested within app directory --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base nested within app directory --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
};
"
`;

exports[`generators/base nested within app directory --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  }}
"
`;

exports[`generators/base nested within app directory --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base nested within app directory --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

"
`;

exports[`generators/base nested within app directory --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'test-my-mesh-app',
  preset: '../../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]s$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../../coverage/test/my-mesh-app'
};
"
`;

exports[`generators/base nested within app directory should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;

exports[`generators/base nested within lib directory --babelJest should use babel for jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'test-my-mesh-lib',
  preset: '../../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../../coverage/test/my-mesh-lib'
};
"
`;

exports[`generators/base nested within lib directory --example should create a country-info cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within lib directory --example should create a country-info js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'CountryInfo',
      handler: {
        soap: {
          source:
            'http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within lib directory --example should create a country-info json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"CountryInfo\\",
      \\"handler\\": {
        \\"soap\\": {
          \\"source\\": \\"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base nested within lib directory --example should create a country-info yml config 1`] = `
"sources:
  - name: CountryInfo
    handler:
      soap:
        source: http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base nested within lib directory --example should create a javascript-wiki cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --example should create a javascript-wiki js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --example should create a javascript-wiki json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base nested within lib directory --example should create a javascript-wiki yml config 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base nested within lib directory --example should create a javascriptWiki config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base nested within lib directory --example should create a stackexchange cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --example should create a stackexchange js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'StackExchange',
      handler: {
        openapi: {
          source:
            'https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --example should create a stackexchange json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"StackExchange\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base nested within lib directory --example should create a stackexchange yml config 1`] = `
"sources:
  - name: StackExchange
    handler:
      openapi:
        source: https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base nested within lib directory --example should create a trippin cjs config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within lib directory --example should create a trippin js config 1`] = `
"module.exports = {
  sources: [
    {
      name: 'Trippin',
      handler: {
        odata: {
          baseUrl: 'https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/',
          batch: 'multipart',
          expandNavProps: true,
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  documents: ['./src/graphql/**/*.*.graphql'],
};
"
`;

exports[`generators/base nested within lib directory --example should create a trippin json config 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"Trippin\\",
      \\"handler\\": {
        \\"odata\\": {
          baseUrl: \\"https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/\\",
          batch: \\"multipart\\",
          expandNavProps: true
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"documents\\": ['./src/graphql/**/*.*.graphql']
}
"
`;

exports[`generators/base nested within lib directory --example should create a trippin yml config 1`] = `
"sources:
  - name: Trippin
    handler:
      odata:
        baseUrl: https://services.odata.org/TripPinRESTierService/(S({env.NX__TRIPPIN__API_KEY}))/
        batch: multipart
        expandNavProps: true

serve:
  browser: false

documents:
    - ./src/graphql/**/*.*.graphql
"
`;

exports[`generators/base nested within lib directory --linter should use eslint for linting 1`] = `
"{
  \\"extends\\": [
    \\"../../.eslintrc.json\\"
  ],
  \\"ignorePatterns\\": [
    \\"!**/*\\",
    \\".mesh\\",
    \\".codegen\\"
  ],
  \\"overrides\\": [
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\",
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.ts\\",
        \\"*.tsx\\"
      ],
      \\"rules\\": {}
    },
    {
      \\"files\\": [
        \\"*.js\\",
        \\"*.jsx\\"
      ],
      \\"rules\\": {}
    }
  ]
}
"
`;

exports[`generators/base nested within lib directory --meshConfig should create a cjs config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --meshConfig should create a js config when --meshConfig=%s 1`] = `
"module.exports = {
  sources: [
    {
      name: 'JavaScript Wiki',
      handler: {
        openapi: {
          source:
            'https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml',
        },
      },
    },
  ],
  serve: {
    browser: false,
  },
  sdk: {
    generateOperations: {
      selectionSetDepth: 6,
    },
  },
};
"
`;

exports[`generators/base nested within lib directory --meshConfig should create a json config when --meshConfig=%s 1`] = `
"{
  \\"sources\\": [
    {
      \\"name\\": \\"JavaScript Wiki\\",
      \\"handler\\": {
        \\"openapi\\": {
          \\"source\\": \\"https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml\\"
        }
      }
    }
  ],
  \\"serve\\": {
    \\"browser\\": false
  },
  \\"sdk\\": {
    \\"generateOperations\\": {
      \\"selectionSetDepth\\": 6
    }
  }
}
"
`;

exports[`generators/base nested within lib directory --meshConfig should create a yml config by default 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base nested within lib directory --meshConfig should create a yml config when --meshConfig=%s 1`] = `
"sources:
  - name: JavaScript Wiki
    handler:
      openapi:
        source: https://api.apis.guru/v2/specs/wikimedia.org/1.0.0/swagger.yaml

serve:
  browser: false

sdk:
  generateOperations:
    selectionSetDepth: 6
"
`;

exports[`generators/base nested within lib directory --unitTestRunner should add a jest config if the unitTestRunner is jest 1`] = `
"/* eslint-disable */
export default {
  displayName: 'test-my-mesh-lib',
  preset: '../../jest.preset.js',
  globals: {
    'ts-jest': {
      tsconfig: '<rootDir>/tsconfig.spec.json',
    }
  },
  testEnvironment: 'node',
  transform: {
    '^.+\\\\\\\\.[tj]sx?$': 'ts-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
  coverageDirectory: '../../coverage/test/my-mesh-lib'
};
"
`;

exports[`generators/base nested within lib directory should add mesh dependencies to the workspace package.json 1`] = `
Object {
  "@graphql-mesh/cli": "0.79.3",
  "@graphql-mesh/openapi": "0.33.34",
  "@graphql-mesh/runtime": "0.44.31",
  "@graphql-mesh/utils": "0.42.6",
}
`;
