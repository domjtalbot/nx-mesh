{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "Sdk",
  "title": "Create a GraphQL Mesh SDK library for Nx",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use?"
    },
    "directory": {
      "description": "The directory of the new sdk.",
      "type": "string",
      "alias": "d"
    },
    "meshConfig": {
      "description": "The file extension to use for the Mesh config",
      "type": "string",
      "default": "yml",
      "alias": "mc",
      "x-prompt": {
        "message": "Which config format would you like to use?",
        "type": "list",
        "items": [
          { "value": "json", "label": "JSON" },
          {
            "value": "yml",
            "label": "YAML"
          },
          {
            "value": "js",
            "label": "JavaScript"
          },
          {
            "value": "cjs",
            "label": "Common JS"
          }
        ]
      }
    },
    "meshExampleProject": {
      "description": "Which example project would you like to use?",
      "type": "string",
      "enum": ["javascriptWiki", "stackexchange", "trippin", "country-info"],
      "default": "javascriptWiki"
    },
    "simpleModuleName": {
      "description": "Keep the module name simple (when using `--directory`).",
      "type": "boolean",
      "default": false
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "tslint"],
      "default": "eslint"
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting).",
      "alias": "t"
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "skipTsConfig": {
      "type": "boolean",
      "default": false,
      "description": "Do not update `tsconfig.base.json` for development experience."
    },
    "compiler": {
      "type": "string",
      "enum": ["tsc", "swc"],
      "default": "tsc",
      "description": "The compiler used by the build and test targets."
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like `@myorg/my-awesome-lib`. Must be a valid npm name."
    },
    "rootDir": {
      "type": "string",
      "description": "Sets the `rootDir` for TypeScript compilation. When not defined, it uses the project's root property, or `srcRootForCompilationRoot` if it is defined."
    },
    "testEnvironment": {
      "type": "string",
      "enum": ["jsdom", "node"],
      "description": "The test environment to use if `unitTestRunner` is set to `jest`.",
      "default": "jsdom"
    },
    "babelJest": {
      "type": "boolean",
      "description": "Use `babel` instead of `ts-jest`.",
      "default": false
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case file names.",
      "alias": "P",
      "default": false
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Whether to enable tsconfig strict mode or not.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
      "type": "boolean"
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project`. We do not do this by default for lint performance reasons.",
      "default": false
    }
  },
  "required": ["name"]
}
