{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "App",
  "title": "Create a GraphQL Mesh API Gateway application for Nx",
  "type": "object",
  "examples": [
    {
      "command": "nx g app myapp --directory=myorg",
      "description": "Generate `apps/myorg/myapp` and `apps/myorg/myapp-e2e`"
    }
  ],
  "properties": {
    "name": {
      "description": "The name of the application.",
      "type": "string",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the application?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "description": "The directory of the new application.",
      "type": "string",
      "alias": "d"
    },
    "meshConfig": {
      "description": "The file extension to use for the Mesh config",
      "type": "string",
      "default": "yml",
      "alias": "mc",
      "x-prompt": {
        "message": "Which config format would you like to use?",
        "type": "list",
        "items": [
          { "value": "json", "label": "JSON" },
          {
            "value": "yml",
            "label": "YAML"
          },
          {
            "value": "js",
            "label": "JavaScript"
          },
          {
            "value": "cjs",
            "label": "Common JS"
          }
        ]
      }
    },
    "example": {
      "description": "Which example project would you like to start with?",
      "type": "string",
      "default": "star-wars",
      "x-prompt": {
        "message": "Which example project would you like to start with?",
        "type": "list",
        "items": [
          { "value": "country-info", "label": "Country Info (SOAP)" },
          { "value": "fake-api", "label": "Fake API (JSON Schema)" },
          { "value": "javascript-wiki", "label": "JavaScript Wiki (OpenAPI)" },
          { "value": "movies", "label": "Movies (Neo4j)" },
          { "value": "rfam", "label": "RFam (MySQL)" },
          { "value": "stackexchange", "label": "StackExchange (OpenAPI)" },
          { "value": "star-wars", "label": "Star Wars API (GraphQL)" },
          { "value": "trippin", "label": "Trip Pin (odata)" }
        ]
      }
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint"],
      "default": "eslint"
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting).",
      "alias": "t"
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false,
      "x-priority": "internal"
    },
    "skipTsConfig": {
      "type": "boolean",
      "default": false,
      "description": "Do not update `tsconfig.base.json` for development experience.",
      "x-priority": "internal"
    },
    "compiler": {
      "type": "string",
      "enum": ["tsc", "swc"],
      "default": "tsc",
      "description": "The compiler used by the build and test targets.",
      "x-priority": "important"
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like `@myorg/my-awesome-lib`. Must be a valid npm name."
    },
    "rootDir": {
      "type": "string",
      "description": "Sets the `rootDir` for TypeScript compilation. When not defined, it uses the project's root property, or `srcRootForCompilationRoot` if it is defined."
    },
    "testEnvironment": {
      "type": "string",
      "enum": ["jsdom", "node"],
      "description": "The test environment to use if `unitTestRunner` is set to `jest`.",
      "default": "jsdom"
    },
    "babelJest": {
      "type": "boolean",
      "description": "Use `babel` instead of `ts-jest`.",
      "default": false
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case file names.",
      "alias": "P",
      "default": false
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Whether to enable tsconfig strict mode or not.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
      "type": "boolean",
      "default": true,
      "x-deprecated": "Nx only supports standaloneConfig"
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project`. We do not do this by default for lint performance reasons.",
      "default": false
    }
  },
  "required": ["name"]
}
