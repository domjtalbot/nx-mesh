{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "App",
  "title": "Create a GraphQL Mesh API Gateway application for Nx",
  "type": "object",
  "examples": [
    {
      "command": "nx g app myapp --directory=myorg",
      "description": "Generate `apps/myorg/myapp` and `apps/myorg/myapp-e2e`"
    }
  ],
  "properties": {
    "name": {
      "description": "The name of the application.",
      "type": "string",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the application?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "description": "The directory of the new application.",
      "type": "string",
      "alias": "d"
    },
    "meshConfig": {
      "description": "The file extension to use for the Mesh config",
      "type": "string",
      "default": "yml",
      "alias": "mc",
      "x-prompt": {
        "message": "Which config format would you like to use?",
        "type": "list",
        "items": [
          { "value": "json", "label": "JSON" },
          {
            "value": "yml",
            "label": "YAML"
          },
          {
            "value": "js",
            "label": "JavaScript"
          },
          {
            "value": "cjs",
            "label": "Common JS"
          }
        ]
      }
    },
    "example": {
      "description": "Which example project would you like to start with?",
      "type": "string",
      "default": "star-wars",
      "x-prompt": {
        "message": "Which example project would you like to start with?",
        "type": "list",
        "items": [
          { "value": "country-info", "label": "Country Info (SOAP)" },
          { "value": "fake-api", "label": "Fake API (JSON Schema)" },
          { "value": "javascript-wiki", "label": "JavaScript Wiki (OpenAPI)" },
          { "value": "movies", "label": "Movies (Neo4j)" },
          { "value": "rfam", "label": "RFam (MySQL)" },
          { "value": "stackexchange", "label": "StackExchange (OpenAPI)" },
          { "value": "star-wars", "label": "Star Wars API (GraphQL)" },
          { "value": "trippin", "label": "Trip Pin (odata)" }
        ]
      }
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "tslint"],
      "default": "eslint"
    },
    "babelJest": {
      "type": "boolean",
      "description": "Use `babel` instead of `ts-jest`.",
      "default": false
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "skipWorkspaceJson": {
      "description": "Skip updating `workspace.json` with default options based on values provided to this app (e.g. `babel`).",
      "type": "boolean",
      "default": false
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests.",
      "default": "jest"
    },
    "e2eTestRunner": {
      "type": "string",
      "enum": ["cypress", "none"],
      "description": "Test runner to use for end to end (E2E) tests.",
      "default": "cypress"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the application (used for linting).",
      "alias": "t"
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`",
      "type": "boolean"
    }
  },
  "required": ["name"]
}
